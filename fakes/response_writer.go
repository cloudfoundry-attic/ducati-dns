// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/miekg/dns"
)

type ResponseWriter struct {
	LocalAddrStub        func() net.Addr
	localAddrMutex       sync.RWMutex
	localAddrArgsForCall []struct{}
	localAddrReturns     struct {
		result1 net.Addr
	}
	RemoteAddrStub        func() net.Addr
	remoteAddrMutex       sync.RWMutex
	remoteAddrArgsForCall []struct{}
	remoteAddrReturns     struct {
		result1 net.Addr
	}
	WriteMsgStub        func(*dns.Msg) error
	writeMsgMutex       sync.RWMutex
	writeMsgArgsForCall []struct {
		arg1 *dns.Msg
	}
	writeMsgReturns struct {
		result1 error
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	TsigStatusStub        func() error
	tsigStatusMutex       sync.RWMutex
	tsigStatusArgsForCall []struct{}
	tsigStatusReturns     struct {
		result1 error
	}
	TsigTimersOnlyStub        func(bool)
	tsigTimersOnlyMutex       sync.RWMutex
	tsigTimersOnlyArgsForCall []struct {
		arg1 bool
	}
	HijackStub        func()
	hijackMutex       sync.RWMutex
	hijackArgsForCall []struct{}
}

func (fake *ResponseWriter) LocalAddr() net.Addr {
	fake.localAddrMutex.Lock()
	fake.localAddrArgsForCall = append(fake.localAddrArgsForCall, struct{}{})
	fake.localAddrMutex.Unlock()
	if fake.LocalAddrStub != nil {
		return fake.LocalAddrStub()
	} else {
		return fake.localAddrReturns.result1
	}
}

func (fake *ResponseWriter) LocalAddrCallCount() int {
	fake.localAddrMutex.RLock()
	defer fake.localAddrMutex.RUnlock()
	return len(fake.localAddrArgsForCall)
}

func (fake *ResponseWriter) LocalAddrReturns(result1 net.Addr) {
	fake.LocalAddrStub = nil
	fake.localAddrReturns = struct {
		result1 net.Addr
	}{result1}
}

func (fake *ResponseWriter) RemoteAddr() net.Addr {
	fake.remoteAddrMutex.Lock()
	fake.remoteAddrArgsForCall = append(fake.remoteAddrArgsForCall, struct{}{})
	fake.remoteAddrMutex.Unlock()
	if fake.RemoteAddrStub != nil {
		return fake.RemoteAddrStub()
	} else {
		return fake.remoteAddrReturns.result1
	}
}

func (fake *ResponseWriter) RemoteAddrCallCount() int {
	fake.remoteAddrMutex.RLock()
	defer fake.remoteAddrMutex.RUnlock()
	return len(fake.remoteAddrArgsForCall)
}

func (fake *ResponseWriter) RemoteAddrReturns(result1 net.Addr) {
	fake.RemoteAddrStub = nil
	fake.remoteAddrReturns = struct {
		result1 net.Addr
	}{result1}
}

func (fake *ResponseWriter) WriteMsg(arg1 *dns.Msg) error {
	fake.writeMsgMutex.Lock()
	fake.writeMsgArgsForCall = append(fake.writeMsgArgsForCall, struct {
		arg1 *dns.Msg
	}{arg1})
	fake.writeMsgMutex.Unlock()
	if fake.WriteMsgStub != nil {
		return fake.WriteMsgStub(arg1)
	} else {
		return fake.writeMsgReturns.result1
	}
}

func (fake *ResponseWriter) WriteMsgCallCount() int {
	fake.writeMsgMutex.RLock()
	defer fake.writeMsgMutex.RUnlock()
	return len(fake.writeMsgArgsForCall)
}

func (fake *ResponseWriter) WriteMsgArgsForCall(i int) *dns.Msg {
	fake.writeMsgMutex.RLock()
	defer fake.writeMsgMutex.RUnlock()
	return fake.writeMsgArgsForCall[i].arg1
}

func (fake *ResponseWriter) WriteMsgReturns(result1 error) {
	fake.WriteMsgStub = nil
	fake.writeMsgReturns = struct {
		result1 error
	}{result1}
}

func (fake *ResponseWriter) Write(arg1 []byte) (int, error) {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	} else {
		return fake.writeReturns.result1, fake.writeReturns.result2
	}
}

func (fake *ResponseWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *ResponseWriter) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].arg1
}

func (fake *ResponseWriter) WriteReturns(result1 int, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *ResponseWriter) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *ResponseWriter) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *ResponseWriter) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *ResponseWriter) TsigStatus() error {
	fake.tsigStatusMutex.Lock()
	fake.tsigStatusArgsForCall = append(fake.tsigStatusArgsForCall, struct{}{})
	fake.tsigStatusMutex.Unlock()
	if fake.TsigStatusStub != nil {
		return fake.TsigStatusStub()
	} else {
		return fake.tsigStatusReturns.result1
	}
}

func (fake *ResponseWriter) TsigStatusCallCount() int {
	fake.tsigStatusMutex.RLock()
	defer fake.tsigStatusMutex.RUnlock()
	return len(fake.tsigStatusArgsForCall)
}

func (fake *ResponseWriter) TsigStatusReturns(result1 error) {
	fake.TsigStatusStub = nil
	fake.tsigStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *ResponseWriter) TsigTimersOnly(arg1 bool) {
	fake.tsigTimersOnlyMutex.Lock()
	fake.tsigTimersOnlyArgsForCall = append(fake.tsigTimersOnlyArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.tsigTimersOnlyMutex.Unlock()
	if fake.TsigTimersOnlyStub != nil {
		fake.TsigTimersOnlyStub(arg1)
	}
}

func (fake *ResponseWriter) TsigTimersOnlyCallCount() int {
	fake.tsigTimersOnlyMutex.RLock()
	defer fake.tsigTimersOnlyMutex.RUnlock()
	return len(fake.tsigTimersOnlyArgsForCall)
}

func (fake *ResponseWriter) TsigTimersOnlyArgsForCall(i int) bool {
	fake.tsigTimersOnlyMutex.RLock()
	defer fake.tsigTimersOnlyMutex.RUnlock()
	return fake.tsigTimersOnlyArgsForCall[i].arg1
}

func (fake *ResponseWriter) Hijack() {
	fake.hijackMutex.Lock()
	fake.hijackArgsForCall = append(fake.hijackArgsForCall, struct{}{})
	fake.hijackMutex.Unlock()
	if fake.HijackStub != nil {
		fake.HijackStub()
	}
}

func (fake *ResponseWriter) HijackCallCount() int {
	fake.hijackMutex.RLock()
	defer fake.hijackMutex.RUnlock()
	return len(fake.hijackArgsForCall)
}
