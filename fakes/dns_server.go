// This file was generated by counterfeiter
package fakes

import "sync"

type DNSServer struct {
	ActivateAndServeStub        func() error
	activateAndServeMutex       sync.RWMutex
	activateAndServeArgsForCall []struct{}
	activateAndServeReturns     struct {
		result1 error
	}
	ShutdownStub        func() error
	shutdownMutex       sync.RWMutex
	shutdownArgsForCall []struct{}
	shutdownReturns     struct {
		result1 error
	}
}

func (fake *DNSServer) ActivateAndServe() error {
	fake.activateAndServeMutex.Lock()
	fake.activateAndServeArgsForCall = append(fake.activateAndServeArgsForCall, struct{}{})
	fake.activateAndServeMutex.Unlock()
	if fake.ActivateAndServeStub != nil {
		return fake.ActivateAndServeStub()
	} else {
		return fake.activateAndServeReturns.result1
	}
}

func (fake *DNSServer) ActivateAndServeCallCount() int {
	fake.activateAndServeMutex.RLock()
	defer fake.activateAndServeMutex.RUnlock()
	return len(fake.activateAndServeArgsForCall)
}

func (fake *DNSServer) ActivateAndServeReturns(result1 error) {
	fake.ActivateAndServeStub = nil
	fake.activateAndServeReturns = struct {
		result1 error
	}{result1}
}

func (fake *DNSServer) Shutdown() error {
	fake.shutdownMutex.Lock()
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct{}{})
	fake.shutdownMutex.Unlock()
	if fake.ShutdownStub != nil {
		return fake.ShutdownStub()
	} else {
		return fake.shutdownReturns.result1
	}
}

func (fake *DNSServer) ShutdownCallCount() int {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *DNSServer) ShutdownReturns(result1 error) {
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 error
	}{result1}
}
